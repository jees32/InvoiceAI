// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id // This will be the Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  profiles  Profile[]
  invoices  Invoice[]
}

model Profile {
  id            String    @id @default(cuid())
  companyName   String
  gstNumber     String?
  address       String?
  contactNumber String?
  supportNumber String?
  logoUrl       String?
  defaultTax    Float?    @default(0)
  defaultTemplate String? // NEW: user's default invoice template
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices      Invoice[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model InvoiceTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  component   String
  color       String   @default("bg-blue-500 hover:bg-blue-600")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id              String       @id @default(cuid())
  invoiceNumber   String       @unique
  customerName    String
  customerEmail   String
  customerPhone   String
  customerAddress String
  issueDate       DateTime
  dueDate         DateTime
  status          String       @default("DRAFT")
  subtotal        Float
  totalGst        Float
  totalAmount     Float
  templateId      String?      // now optional
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  profileId       String
  profile         Profile      @relation(fields: [profileId], references: [id])
  items           InvoiceItem[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model InvoiceItem {
  id        String  @id @default(cuid())
  name      String
  quantity  Int
  price     Float
  tax       Float
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Product {
  id        String  @id @default(cuid())
  name      String
  sku       String @unique
  price     Float
  inventory Int
  tax       Float
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}